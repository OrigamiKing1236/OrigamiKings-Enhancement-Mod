plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group


repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url 'https://dl.cloudsmith.io/public/origamiking3612/origamikings-api/maven/' }
    maven { url "https://maven.shedaniel.me" }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
}


def dataOutput = 'src/main/generated'

loom {
    runs {
        datagen {
            server()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file(dataOutput)}"

            runDir "build/datagen"
        }
    }
}

sourceSets { main { resources { srcDirs += dataOutput } } }

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Uncomment the following line to enable the deprecated Fabric API modules.
    // These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.
    // modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"

    modImplementation "software.bernie.geckolib:geckolib-fabric-1.20:${gecklib_version}"

    modImplementation "net.origamiking:Origamikings-API:${origamikings_api}"

    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_version}"
    modCompileOnly "dev.emi:emi-fabric:${emi_version}:api"

//    modLocalRuntime "dev.emi:emi-fabric:${emi_version}"
//    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}
//processResources code from Geckolib
processResources {
    doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "OrigamiKings Enhancement Mod",
                "Specification-Vendor"    : "OrigamiKing3612",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : mod_version,
                "Implementation-Vendor"   : "OrigamiKing3612",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
loom {
    accessWidenerPath = file("src/main/resources/oem.accesswidener")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = project.archives_base_name
        }
    }
    repositories {
        repositories {
            maven {
                name = "cloudsmith"
                url = "https://maven.cloudsmith.io/origamiking3612/origamiKings-enhancement-mod/"
                credentials {
                    username = System.getenv("CLOUDSMITH_USERNAME")
                    password = System.getenv("CLOUDSMITH_PASSWORD")
                }
            }
        }
    }
}
def mod_changelog = "Version ${mod_version}: The Great Recipe Update! \n\n . " +
        "Cleaned up and fixed Recipes. Added Terracotta Stairs Slabs and Walls. Added Welcome advancement." +
        "If you want more compatibility or find a bug just open an [issue](https://github.com/OrigamiKing3612/OrigamiKings-Enhancement-Mod/issues)"

modrinth {
    debugMode = false
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${project_id}"
    versionNumber = "${mod_version}"
    versionType = "${version_type}"
    uploadFile = remapJar
    gameVersions = ['1.20.1'] // Must be an array, even with only one version
    dependencies {
        // scope.type
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
        required.project "geckolib"
        required.project "fabric-api"
        embedded.project "origamikings-api"
        optional.project "emi"
        optional.project "rei"
    }
    changelog = mod_changelog;
}
//end
curseforge {
    project {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        id = "860010"
        releaseType = "release"
        changelogType = 'text'
        changelog = mod_changelog
        addGameVersion("1.20.1")
        addGameVersion("Fabric")
        addGameVersion("Java 17")

//			relations {
//				requiredDependency 'fabric-api'
//			}
        mainArtifact(remapJar)

        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }
    options {
//			debug = true
        forgeGradleIntegration = false
    }
}
